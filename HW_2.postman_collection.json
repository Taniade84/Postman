{
	"info": {
		"_postman_id": "dd8b2f90-f2ba-4006-aa66-0a98d1198be8",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "taniade",
							"type": "text"
						},
						{
							"key": "password",
							"value": "kot2021",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login?login=taniade&password=kot2021",
					"host": [
						"{{url}}login"
					],
					"query": [
						{
							"key": "login",
							"value": "taniade"
						},
						{
							"key": "password",
							"value": "kot2021"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test Age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"37\");\r",
							"});\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Ivan\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test Salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(3000);\r",
							"});\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your  request test Name\", function () {\r",
							" var formData = request.data  ;\r",
							" pm.expect(formData.name).to.eql(pm.response.json().name)\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your  request test Age\", function () {\r",
							" var formData = request.data;\r",
							" pm.expect(formData.age).to.eql(pm.response.json().age)\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your  request test Salary\", function () {\r",
							" var formData = request.data;\r",
							" pm.expect(+formData.salary).to.eql(pm.response.json().salary)\r",
							"});\r",
							"\r",
							"//11.Вывести в консоль параметр family из response.\r",
							"pm.test(\"Your test Family\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family);\r",
							"    console.log(jsonData.family)\r",
							"});\r",
							"//11.1 Вывести в консоль параметр .u_salary_1_5_year из response.\r",
							"pm.test(\"Your test Salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year);\r",
							"    console.log(jsonData.family.u_salary_1_5_year)\r",
							"});\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Your test Salary\", function () {\r",
							"    var formData = request.data;\r",
							"    var jsonData = pm.response.json ();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(formData.salary*4);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test Salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year);\r",
							"    console.log(jsonData.family.u_salary_1_5_year)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							" var jsonData = pm.response.json();\r",
							"//Спарсить request.\r",
							"  var requestData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"Your test Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var requestData = pm.request.url.query.toObject();\r",
							"        pm.expect(jsonData.name).to.eql(requestData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test Age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var requestData = pm.request.url.query.toObject();\r",
							"        pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test Salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var requestData = pm.request.url.query.toObject();\r",
							"        pm.expect(jsonData.salary).to.eql(+requestData.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"pm.test(\"Your test Family\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.family);\r",
							"console.log(jsonData.family)\r",
							"});\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Your test expect Dog_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.family.pets.dog.name).to.exist;\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Your test expect Dog_age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.family.pets.dog.age).to.exist;\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Your test expect Dog_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.family.pets.dog.name ).to. eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Valide age equel 4\" , function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"}) ;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Sveta&age=39&salary=500",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\" Varify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"Your test Name\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"//or\r",
							"pm.test(\"Your test Name\", function () {\r",
							"    pm.expect(respData.name).to.eql(pm.request.url.query.toObject().name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Verify request salary to equally response salary\", function() {\r",
							"pm.expect(respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"pm.expect(reqData.salary);\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"pm.expect(respData.salary);\r",
							"console.log(respData.salary);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"pm.expect(respData.salary[0]);\r",
							"console.log(respData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.expect(parseInt(respData.salary[1]));\r",
							"console.log(parseInt(respData.salary[1]));\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.expect(parseInt(respData.salary[2]));\r",
							"console.log(parseInt(respData.salary[2]));\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Verify request salary to equally [0]response salary\", function() {\r",
							"pm.expect(respData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Verify request salary to equally [1]response salary\", function() {\r",
							"pm.expect(+respData.salary[1]).to.eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Verify request salary to equally [2]response salary\", function() {\r",
							"pm.expect(+respData.salary[2]).to.eql(reqData.salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"var  req_name = reqData.name;\r",
							" //Создать в окружении переменную age\r",
							" var req_age =reqData.age;\r",
							"\r",
							" //Создать в окружении переменную salary\r",
							" var reg_salary = reqData.salary;\r",
							"\r",
							"//Передать в окружение переменную name\r",
							" pm.environment.set(\"name\", reqData.name);\r",
							"\r",
							" //Передать в окружение переменную age\r",
							" pm.environment.set(\"age\", reqData.age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							" pm.environment.set(\"salary\", reqData.salary);\r",
							"\r",
							" //Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							" let i = [1,2,3];\r",
							" console.log(\"lenght =\" ,respData.salary);\r",
							" for (let i = 0; i< respData.salary.lenght; i++ ) {\r",
							"     console.log(\"Vid =\",  respData.salary[i] );\r",
							" }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Maks&age=30&salary=1500",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maks"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//Спарсить request.\r",
							"var reqData = request.data ;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Verify  response has start_qa_salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.start_qa_salary).to.exist;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Verify  response has qa_salary_after_6_months \", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_6_months).to.exist;\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Verify  response has qa_salary_after_12_months \", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_12_months).to.exist;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Verify  response has qa_salary_after_1.5_year \", function () {\r",
							"  pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.exist;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Verify  response has qa_salary_after_3.5_year \", function () {\r",
							"  pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.exist;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Verify  response has person\", function () {\r",
							"  pm.expect(jsonData.person).to.exist;\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Verify start_qa_salary to equal salary из request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Verify    qa_salary_after_6_months to equal salary*2  \", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Verify    qa_salary_after_12_months to equal salary*2.7  \", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Verify    qa_salary_after_1.5_year to equal salary*3.3 \", function () {\r",
							"  pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(reqData.salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Verify    qa_salary_after_3.5_year to equal salary*3.8 \", function () {\r",
							"  pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqData.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Verify person, first element  from u_name to equally request salary\", function() {\r",
							"pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Verify u_age to equally request age\", function() {\r",
							"pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							" \r",
							" //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" pm.test(\"Verify u_salary_5_years to equally salary*4.2 \", function() {\r",
							"pm.expect(jsonData.person[\"u_salary_5_years\"]).to.eql(reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							" \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "",
							"disabled": true
						},
						{
							"key": "age",
							"value": "",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}